# @package _global_
data_class: supernode_dataset
dataset:
  dataset: uspto-50k
  dataset_nb: dummy15-10-stereo
  nb_rct_dummy_nodes: 15
  num_workers: 0
  shuffle: false
  with_explicit_h: false
  with_formal_charge: true
  dataset_size:
    train: 10
    test: 10
    val: 10
  with_formal_charge_in_atom_symbols: False
  use_stereochemistry: True
  atom_types: ['none', 'O', 'C', 'N', 'I', 'Cl', 'Si', 'F', 'Br', 'S', 'B', 'Cu', 'Sn', 'P', 'Se', 'Zn', 'Mg', 'U', 'Au']
  atom_charges: [0,1,-1]
  atom_chiral_tags: ['none', 'ccw', 'cw']
  bond_dirs: ['none', 'ENDUPRIGHT', 'ENDDOWNRIGHT']
  bond_types: ['none', 'SINGLE', 'DOUBLE', 'TRIPLE']
  # bond_types: ['none', BT.SINGLE, BT.DOUBLE, BT.TRIPLE, 'mol', 'within', 'across']
  # bond_orders: [0, 1, 2, 3, 0, 0, 0]
  # allowed_bonds:
  #   'O': [2]
  #   'C': [4]
  #   'N': [3]
  #   'I': [1, 3, 5, 7]
  #   'Cl': [1]
  #   'Si': [4, 6]
  #   'F': [1]
  #   'Br': [1]
  #   'N+1': [4]
  #   'O-1': [1]
  #   'S': [2, 4, 6]
  #   'B': [3]
  #   'N-1': [2]
  #   'Zn+1': [3]
  #   'Cu': [1, 2] 
  #   'Sn': [2, 4]
  #   'P+1': [4, 6, 8]
  #   'Mg+1': [3]
  #   'C-1': [3]
  #   'P': [3, 5, 7]
  #   'S+1': [3, 5, 7]
  #   'S-1': [1, 3, 5]
  #   'Se': [2, 4, 6]
  #   'Zn': [2]
  #   'Mg': [2]
  #   'U': [6]
  #   'Au': [0]
diffusion:
  ce_lambda: 0.01
  denoiser: neuralnet
  diffuse_edges: true
  diffusion_noise_schedule: cosine
  diffusion_steps: 10
  diffusion_steps_eval: 1
  edge_conditional_set: test
  edge_states_to_mask: null
  # edge_states_to_mask:
  # - mol
  # - within
  # - across
  extra_features: null
  lambda_train:
  - 1
  - 0
  mask_edges: product_and_sn
  mask_nodes: product_and_sn
  node_states_to_mask:
  - none
  transition: absorbing_masknoedge
general:
  task: rxn
  wandb: 
    entity: najwalb
    project: retrodiffuser
    mode: online
    resume: false
    run_name: 'rxn-default'
    run_id: null # id of the training run to use (resume/sample from)
    group: debug
    tags: ["debug", "can_delete"]
    checkpoint_epochs: null # epoch num for the checkpoint to use (resume/sample from)
neuralnet:
  architecture: transformer_for_all_features
  checkpoint_file: null
  ema_decay: 0.999
  extra_features: true
  hidden_dims:
    de: 64
    dx: 256
    dy: 64
    n_head: 8
    dim_ffE: 128
    dim_ffX: 256
    dim_ffy: 128
  hidden_mlp_dims:
    E: 128
    X: 256
    y: 128
  n_layers: 2
  use_ema: false
  pos_encoding_type: laplacian_pos_enc
test:
  eval_before_first_epoch: False
  batch_size: 1
  chains_to_save: 1
  elbo_samples: 1
  full_dataset: false
  loss_0_repeat: 1
  condition_start: 0 # the start of a condition range: [condition_start, condition_start+n_conditions]
  condition_steps: None # [start, end, step] => to generate condition ranges
  n_conditions: 2
  n_samples_per_condition: 2
  plot_dummy_nodes: true
  repeat_elbo: 1
  size_test_splits: 100
  smiles_accuracy: true
  testfile: 0
  topks:
  - 1
  - 3
  - 5
  - 10
  - 50
  - 100
  with_denoising: true
  total_cond_eval: 2
train:
  batch_by_size: false
  batch_size: 1
  epochs: 100
  eval_every_epoch: 30
  grad_every_step: 100
  log_every_t: 20
  log_grad: false
  log_to_wandb: true
  loss: ce
  lr: 1e-3
  samples_to_generate: 3
  seed: 1
  with_mask: false
